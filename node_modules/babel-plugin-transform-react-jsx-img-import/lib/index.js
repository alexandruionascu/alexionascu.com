'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref) {
  let t = _ref.types;


  return {
    visitor: {
      CallExpression: function CallExpression(path, state) {

        if (isReactCreateElement(path) && hasImgArgument(path)) {

          let imgSrcNodePath = getImgSrcNodePath(path);

          if (imgSrcNodePath && imgSrcNodePath.isStringLiteral()) {

            let srcValue = imgSrcNodePath.node.value;

            // Ignore URL src
            if (!isURL(srcValue)) {

              // cache import identifiers.
              let imgImportIdentifier = imgImportIdentifiers[srcValue];

              if (!imgImportIdentifier) {
                imgImportIdentifier = rootScope.generateUidIdentifier('image');
                imgImportIdentifiers[srcValue] = imgImportIdentifier;
              }

              // We need to access the default import since Babel shim non
              // CommonJS modules.
              let imgImportDefaultIdentifier = t.memberExpression(imgImportIdentifier, t.identifier("default"));

              imgSrcNodePath.replaceWith(imgImportDefaultIdentifier);
            }
          }
        }
      },


      Program: {
        exit: function exit(path, state) {

          const importDeclarations = _lodash2.default.map(imgImportIdentifiers, (imgImportIdentifier, imgSrcLiteral) => {
            return t.importDeclaration([t.importNamespaceSpecifier(imgImportIdentifier)], t.stringLiteral(imgSrcLiteral));
          });

          path.unshiftContainer('body', importDeclarations);
        },
        enter: function enter(path, state) {
          imgImportIdentifiers = {};
          rootScope = path.scope;
        }
      }
    }
  };
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let imgImportIdentifiers = {};
let rootScope;

function isReactCreateElement(path) {
  return path.get('callee').matchesPattern('React.createElement');
}

function hasImgArgument(path) {
  return path.get('arguments').length > 1 && path.get('arguments')[0].isStringLiteral({ value: 'img' });
}

function getImgSrcNodePath(path) {

  if (path.get('arguments')[1].isObjectExpression()) {

    let props = path.get('arguments')[1].get("properties");

    for (let prop of props) {

      if (!prop.isProperty()) continue;

      let key = prop.get("key");

      if (key.isIdentifier({ name: 'src' })) {
        return prop.get("value");
      }
    }
  }
}

function isURL(url) {

  let lowerURL = url.toLowerCase();
  return lowerURL.startsWith('http://') || lowerURL.startsWith('https://');
}